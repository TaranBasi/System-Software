/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ss_crswrk;

import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.InetAddress;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.ListModel;
import java.io.*;
import java.nio.file.Files;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import static java.nio.file.StandardCopyOption.*;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;
import java.lang.String;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import ss_crswrk.ServerHandler.user;
import sun.audio.AudioPlayer;
import sun.audio.AudioStream;


/**
 *
 * @author Daniel
 */
public class window extends javax.swing.JFrame {


    DefaultListModel<String> registerListModel;
    DefaultListModel<String> friendsListModel;
    DefaultListModel<String> connectedPeopleModel;
    DefaultListModel<String> registerMusicListModel;
    DefaultListModel<String> sharedSongsListModel;
    DefaultListModel<String> friendRequestsListModel;
    static String currentUser;
    java.util.Timer timer;
    String musicString = "";
    String imageString = "";
    String post;


    /**
     * Creates new form window
     */
    public window() throws InterruptedException {
        registerListModel = new DefaultListModel<String>();
        friendsListModel = new DefaultListModel<String>();
        connectedPeopleModel = new DefaultListModel<String>();
        registerMusicListModel = new DefaultListModel<String>();
        sharedSongsListModel = new DefaultListModel<String>();
        friendRequestsListModel = new DefaultListModel<String>();
        
        initComponents();

        incorrectPasswordLbl.setVisible(false);
        usernameDoesntExistLbl.setVisible(false);
        fillAllFieldsLbl.setVisible(false);
        
        this.setTitle("   SYSTEMS SOFTWARE");
        
        
    }

    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        parentPanel = new javax.swing.JPanel();
        loginPanel = new javax.swing.JPanel();
        usernameLbl = new javax.swing.JLabel();
        goToRegisterBtn = new javax.swing.JButton();
        passwordLbl = new javax.swing.JLabel();
        usernameTxtFld = new javax.swing.JTextField();
        passwordTxtFld = new javax.swing.JTextField();
        loginBtn = new javax.swing.JButton();
        incorrectPasswordLbl = new javax.swing.JLabel();
        usernameDoesntExistLbl = new javax.swing.JLabel();
        registerPanel = new javax.swing.JPanel();
        rUsernameLbl = new javax.swing.JLabel();
        backToLoginBtn = new javax.swing.JButton();
        registerBtn = new javax.swing.JButton();
        orLbl = new javax.swing.JLabel();
        PoBLbl = new javax.swing.JLabel();
        DoBLbl = new javax.swing.JLabel();
        rUsernameTxtFld = new javax.swing.JTextField();
        PoBTxtFld = new javax.swing.JTextField();
        DoBTxtFld = new javax.swing.JTextField();
        musicDropdown = new javax.swing.JComboBox<>();
        addBtn = new javax.swing.JButton();
        musicProfileLbl = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        rMusicList = new javax.swing.JList<>();
        deleteBtn = new javax.swing.JButton();
        rPasswordTxtFld = new javax.swing.JTextField();
        rPasswordLbl = new javax.swing.JLabel();
        rConfirmPasswordTxtFld = new javax.swing.JTextField();
        rConfirmPasswordLbl = new javax.swing.JLabel();
        rImportMusicBtn = new javax.swing.JButton();
        rAddMusicLbl = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        rGenreList = new javax.swing.JList<>();
        passwordDontMatchLbl = new javax.swing.JLabel();
        usernameExistsLbl = new javax.swing.JLabel();
        fillAllFieldsLbl = new javax.swing.JLabel();
        uploadPicBtn = new javax.swing.JButton();
        registerPicLbl = new javax.swing.JLabel();
        homePanel = new javax.swing.JPanel();
        friendSection = new javax.swing.JPanel();
        friendsLbl = new javax.swing.JLabel();
        friendsList = new javax.swing.JScrollPane();
        friendsListContents = new javax.swing.JList<>();
        infoLbl = new javax.swing.JLabel();
        infoTxtArea = new javax.swing.JScrollPane();
        infoContents = new javax.swing.JTextArea();
        sharedSongsLbl = new javax.swing.JLabel();
        sharedSongsList = new javax.swing.JScrollPane();
        sharedSongsListContents = new javax.swing.JList<>();
        playBtn = new javax.swing.JButton();
        stopBtn = new javax.swing.JButton();
        postSection = new javax.swing.JPanel();
        friendsPostLbl = new javax.swing.JLabel();
        postList = new javax.swing.JScrollPane();
        postListContents = new javax.swing.JTextArea();
        postLbl = new javax.swing.JLabel();
        postTxtFld = new javax.swing.JTextField();
        postBtn = new javax.swing.JButton();
        requestSection = new javax.swing.JPanel();
        connectedPeopleListLbl = new javax.swing.JLabel();
        connectedPeopleList = new javax.swing.JScrollPane();
        connectedPeopleListContents = new javax.swing.JList<>();
        requestFriendshipBtn = new javax.swing.JButton();
        chatBtn = new javax.swing.JButton();
        friendshipRequestLbl = new javax.swing.JLabel();
        friendshipRequestList = new javax.swing.JScrollPane();
        friendshipRequestListContents = new javax.swing.JList<>();
        acceptBtn = new javax.swing.JButton();
        refuseBtn = new javax.swing.JButton();
        hLogoutBtn = new javax.swing.JButton();
        currentUserLbl = new javax.swing.JLabel();
        imageLbl = new javax.swing.JLabel();
        friendImageLbl = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(690, 775));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        parentPanel.setPreferredSize(new java.awt.Dimension(600, 700));
        parentPanel.setLayout(new java.awt.CardLayout());

        loginPanel.setPreferredSize(new java.awt.Dimension(600, 700));

        usernameLbl.setText("Username:");

        goToRegisterBtn.setText("Register");
        goToRegisterBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goToRegisterBtnActionPerformed(evt);
            }
        });

        passwordLbl.setText("Password:");

        usernameTxtFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameTxtFldActionPerformed(evt);
            }
        });

        passwordTxtFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordTxtFldActionPerformed(evt);
            }
        });

        loginBtn.setText("Login");
        loginBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginBtnActionPerformed(evt);
            }
        });

        incorrectPasswordLbl.setForeground(new java.awt.Color(255, 0, 0));
        incorrectPasswordLbl.setText("Password Incorrect.");

        usernameDoesntExistLbl.setForeground(new java.awt.Color(255, 0, 0));
        usernameDoesntExistLbl.setText("Username doesn't exist.");

        javax.swing.GroupLayout loginPanelLayout = new javax.swing.GroupLayout(loginPanel);
        loginPanel.setLayout(loginPanelLayout);
        loginPanelLayout.setHorizontalGroup(
            loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginPanelLayout.createSequentialGroup()
                .addGap(148, 148, 148)
                .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(loginPanelLayout.createSequentialGroup()
                        .addComponent(incorrectPasswordLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(usernameDoesntExistLbl))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, loginPanelLayout.createSequentialGroup()
                        .addComponent(loginBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(goToRegisterBtn))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, loginPanelLayout.createSequentialGroup()
                        .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(usernameLbl)
                            .addComponent(passwordLbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(usernameTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(passwordTxtFld, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(251, Short.MAX_VALUE))
        );

        loginPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {goToRegisterBtn, loginBtn});

        loginPanelLayout.setVerticalGroup(
            loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginPanelLayout.createSequentialGroup()
                .addGap(220, 220, 220)
                .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameLbl)
                    .addComponent(usernameTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordLbl))
                .addGap(18, 18, 18)
                .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(goToRegisterBtn)
                    .addComponent(loginBtn))
                .addGap(18, 18, 18)
                .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(incorrectPasswordLbl)
                    .addComponent(usernameDoesntExistLbl))
                .addContainerGap(372, Short.MAX_VALUE))
        );

        parentPanel.add(loginPanel, "card3");

        registerPanel.setPreferredSize(new java.awt.Dimension(600, 700));

        rUsernameLbl.setText("Username:");

        backToLoginBtn.setText("Back to Login");
        backToLoginBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backToLoginBtnActionPerformed(evt);
            }
        });

        registerBtn.setText("Register");
        registerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerBtnActionPerformed(evt);
            }
        });

        orLbl.setText("or");

        PoBLbl.setText("Place of Birth:");

        DoBLbl.setText("Date of Birth:");

        PoBTxtFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PoBTxtFldActionPerformed(evt);
            }
        });

        musicDropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Rap", "R'n'B", "Pop", "Folk", "Acoustic", "Opera", "Rock", " " }));
        musicDropdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                musicDropdownActionPerformed(evt);
            }
        });

        addBtn.setText("Add");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        musicProfileLbl.setText("Music Profile");

        rMusicList.setModel(registerMusicListModel);
        jScrollPane2.setViewportView(rMusicList);

        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        rPasswordTxtFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rPasswordTxtFldActionPerformed(evt);
            }
        });

        rPasswordLbl.setText("Password:");

        rConfirmPasswordTxtFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rConfirmPasswordTxtFldActionPerformed(evt);
            }
        });

        rConfirmPasswordLbl.setText("Confirm Password:");

        rImportMusicBtn.setText("Import");
        rImportMusicBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rImportMusicBtnActionPerformed(evt);
            }
        });

        rAddMusicLbl.setText("Add Songs:");

        rGenreList.setModel(registerListModel);
        rGenreList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                rGenreListValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(rGenreList);

        passwordDontMatchLbl.setForeground(new java.awt.Color(255, 0, 0));
        passwordDontMatchLbl.setText("Passwords don't match");

        usernameExistsLbl.setForeground(new java.awt.Color(255, 0, 0));
        usernameExistsLbl.setText("Username already exists.");

        fillAllFieldsLbl.setForeground(new java.awt.Color(255, 0, 0));
        fillAllFieldsLbl.setText("Please fill out all the fields");

        uploadPicBtn.setText("Upload Picture");
        uploadPicBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadPicBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout registerPanelLayout = new javax.swing.GroupLayout(registerPanel);
        registerPanel.setLayout(registerPanelLayout);
        registerPanelLayout.setHorizontalGroup(
            registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, registerPanelLayout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, registerPanelLayout.createSequentialGroup()
                        .addGroup(registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(usernameExistsLbl)
                                .addGroup(registerPanelLayout.createSequentialGroup()
                                    .addGroup(registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(registerBtn)
                                        .addGroup(registerPanelLayout.createSequentialGroup()
                                            .addComponent(registerPicLbl)
                                            .addGap(115, 115, 115)))
                                    .addGap(18, 18, 18)
                                    .addComponent(orLbl)
                                    .addGap(18, 18, 18)
                                    .addComponent(backToLoginBtn))
                                .addGroup(registerPanelLayout.createSequentialGroup()
                                    .addGap(8, 8, 8)
                                    .addComponent(uploadPicBtn)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, registerPanelLayout.createSequentialGroup()
                                .addGroup(registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(rConfirmPasswordLbl)
                                    .addComponent(rPasswordLbl)
                                    .addComponent(PoBLbl)
                                    .addComponent(DoBLbl)
                                    .addComponent(rUsernameLbl))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(PoBTxtFld)
                                    .addComponent(rUsernameTxtFld)
                                    .addComponent(rPasswordTxtFld)
                                    .addComponent(DoBTxtFld)
                                    .addComponent(rConfirmPasswordTxtFld)
                                    .addGroup(registerPanelLayout.createSequentialGroup()
                                        .addGroup(registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(fillAllFieldsLbl)
                                            .addComponent(passwordDontMatchLbl))
                                        .addGap(0, 91, Short.MAX_VALUE)))))
                        .addGap(41, 41, 41)
                        .addGroup(registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(registerPanelLayout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addComponent(musicProfileLbl))
                            .addComponent(musicDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(registerPanelLayout.createSequentialGroup()
                                    .addComponent(addBtn)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(deleteBtn))
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, registerPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(registerPanelLayout.createSequentialGroup()
                                .addComponent(rAddMusicLbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(rImportMusicBtn))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(50, 50, 50))
        );

        registerPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {backToLoginBtn, registerBtn});

        registerPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {addBtn, deleteBtn});

        registerPanelLayout.setVerticalGroup(
            registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(registerPanelLayout.createSequentialGroup()
                .addGap(105, 105, 105)
                .addComponent(musicProfileLbl)
                .addGap(18, 18, 18)
                .addGroup(registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(registerPanelLayout.createSequentialGroup()
                        .addComponent(musicDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(registerPanelLayout.createSequentialGroup()
                        .addGroup(registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rUsernameLbl)
                            .addComponent(rUsernameTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(8, 8, 8)
                        .addGroup(registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rPasswordTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rPasswordLbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rConfirmPasswordTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rConfirmPasswordLbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(passwordDontMatchLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                        .addGroup(registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(PoBTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PoBLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(DoBTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DoBLbl))))
                .addGroup(registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(registerPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(deleteBtn)
                            .addComponent(addBtn)))
                    .addGroup(registerPanelLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(fillAllFieldsLbl)))
                .addGap(37, 37, 37)
                .addGroup(registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rAddMusicLbl)
                    .addComponent(rImportMusicBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(registerPanelLayout.createSequentialGroup()
                        .addComponent(registerPicLbl)
                        .addGap(61, 61, 61)
                        .addComponent(uploadPicBtn)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 72, Short.MAX_VALUE)
                .addGroup(registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backToLoginBtn)
                    .addComponent(registerBtn)
                    .addComponent(orLbl))
                .addGap(18, 18, 18)
                .addComponent(usernameExistsLbl)
                .addGap(20, 20, 20))
        );

        parentPanel.add(registerPanel, "card2");

        homePanel.setPreferredSize(new java.awt.Dimension(600, 730));

        friendSection.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        friendsLbl.setText("Friends");

        friendsListContents.setModel(friendsListModel);
        friendsListContents.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                friendsListContentsValueChanged(evt);
            }
        });
        friendsList.setViewportView(friendsListContents);

        infoLbl.setText("Information");

        infoContents.setEditable(false);
        infoContents.setColumns(20);
        infoContents.setRows(5);
        infoTxtArea.setViewportView(infoContents);

        sharedSongsLbl.setText("Shared Songs");

        sharedSongsListContents.setModel(sharedSongsListModel);
        sharedSongsListContents.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                sharedSongsListContentsValueChanged(evt);
            }
        });
        sharedSongsList.setViewportView(sharedSongsListContents);

        playBtn.setText("Play");
        playBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playBtnActionPerformed(evt);
            }
        });

        stopBtn.setText("Stop");
        stopBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout friendSectionLayout = new javax.swing.GroupLayout(friendSection);
        friendSection.setLayout(friendSectionLayout);
        friendSectionLayout.setHorizontalGroup(
            friendSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(friendSectionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(friendSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(friendsList, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(friendsLbl))
                .addGap(18, 18, 18)
                .addGroup(friendSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(friendSectionLayout.createSequentialGroup()
                        .addComponent(infoLbl)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(infoTxtArea, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(friendSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sharedSongsLbl)
                    .addComponent(sharedSongsList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(friendSectionLayout.createSequentialGroup()
                        .addComponent(playBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(stopBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        friendSectionLayout.setVerticalGroup(
            friendSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(friendSectionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(friendSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(friendsLbl)
                    .addComponent(infoLbl)
                    .addComponent(sharedSongsLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(friendSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, friendSectionLayout.createSequentialGroup()
                        .addComponent(sharedSongsList, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(friendSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(playBtn)
                            .addComponent(stopBtn)))
                    .addComponent(friendsList, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                    .addComponent(infoTxtArea))
                .addContainerGap())
        );

        postSection.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        friendsPostLbl.setText("Friends Posts");

        postListContents.setEditable(false);
        postListContents.setColumns(20);
        postListContents.setRows(5);
        postList.setViewportView(postListContents);

        postLbl.setText("Post:");

        postTxtFld.setText("What are you listening to?");
        postTxtFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postTxtFldActionPerformed(evt);
            }
        });

        postBtn.setText("Post");
        postBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout postSectionLayout = new javax.swing.GroupLayout(postSection);
        postSection.setLayout(postSectionLayout);
        postSectionLayout.setHorizontalGroup(
            postSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(postSectionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(postSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(postList)
                    .addGroup(postSectionLayout.createSequentialGroup()
                        .addComponent(friendsPostLbl)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(postSectionLayout.createSequentialGroup()
                        .addComponent(postLbl)
                        .addGap(18, 18, 18)
                        .addComponent(postTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(postBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        postSectionLayout.setVerticalGroup(
            postSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(postSectionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(friendsPostLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(postList, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(postSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(postTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(postLbl)
                    .addComponent(postBtn))
                .addContainerGap())
        );

        requestSection.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        connectedPeopleListLbl.setText("List of Connected People");

        connectedPeopleListContents.setModel(connectedPeopleModel);
        connectedPeopleListContents.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                connectedPeopleListContentsValueChanged(evt);
            }
        });
        connectedPeopleList.setViewportView(connectedPeopleListContents);

        requestFriendshipBtn.setText("Request \nFriendship");
        requestFriendshipBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestFriendshipBtnActionPerformed(evt);
            }
        });

        chatBtn.setText("Chat");
        chatBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chatBtnActionPerformed(evt);
            }
        });

        friendshipRequestLbl.setText("Friendship Request from");

        friendshipRequestListContents.setModel(friendRequestsListModel);
        friendshipRequestListContents.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                friendshipRequestListContentsValueChanged(evt);
            }
        });
        friendshipRequestList.setViewportView(friendshipRequestListContents);

        acceptBtn.setText("Accept");
        acceptBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptBtnActionPerformed(evt);
            }
        });

        refuseBtn.setText("Refuse");
        refuseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refuseBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout requestSectionLayout = new javax.swing.GroupLayout(requestSection);
        requestSection.setLayout(requestSectionLayout);
        requestSectionLayout.setHorizontalGroup(
            requestSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(requestSectionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(requestSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(connectedPeopleListLbl)
                    .addGroup(requestSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, requestSectionLayout.createSequentialGroup()
                            .addComponent(requestFriendshipBtn)
                            .addGap(18, 18, 18)
                            .addComponent(chatBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(connectedPeopleList, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(31, 31, 31)
                .addGroup(requestSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(friendshipRequestList)
                    .addGroup(requestSectionLayout.createSequentialGroup()
                        .addComponent(friendshipRequestLbl)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(requestSectionLayout.createSequentialGroup()
                        .addComponent(acceptBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(refuseBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        requestSectionLayout.setVerticalGroup(
            requestSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(requestSectionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(requestSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(connectedPeopleListLbl)
                    .addComponent(friendshipRequestLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(requestSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(friendshipRequestList, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                    .addComponent(connectedPeopleList, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(requestSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(requestFriendshipBtn)
                    .addComponent(chatBtn)
                    .addComponent(acceptBtn)
                    .addComponent(refuseBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        hLogoutBtn.setText("Logout");
        hLogoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hLogoutBtnActionPerformed(evt);
            }
        });

        currentUserLbl.setText("jLabel1");

        javax.swing.GroupLayout homePanelLayout = new javax.swing.GroupLayout(homePanel);
        homePanel.setLayout(homePanelLayout);
        homePanelLayout.setHorizontalGroup(
            homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(homePanelLayout.createSequentialGroup()
                        .addComponent(currentUserLbl)
                        .addGap(99, 99, 99)
                        .addComponent(imageLbl)
                        .addGap(158, 158, 158)
                        .addComponent(friendImageLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(hLogoutBtn))
                    .addComponent(postSection, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(friendSection, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(requestSection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        homePanelLayout.setVerticalGroup(
            homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(friendSection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(postSection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(requestSection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hLogoutBtn)
                    .addComponent(currentUserLbl)
                    .addComponent(imageLbl)
                    .addComponent(friendImageLbl))
                .addGap(14, 14, 14))
        );

        parentPanel.add(homePanel, "card4");

        getContentPane().add(parentPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void goToRegisterBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goToRegisterBtnActionPerformed
        //Change screen from login to register
        changeScreen(registerPanel);
        passwordDontMatchLbl.setVisible(false);
        usernameExistsLbl.setVisible(false);
    }//GEN-LAST:event_goToRegisterBtnActionPerformed

    private void backToLoginBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backToLoginBtnActionPerformed
        //Change screen from register to login
        changeScreen(loginPanel);
    }//GEN-LAST:event_backToLoginBtnActionPerformed

    private void passwordTxtFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordTxtFldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_passwordTxtFldActionPerformed

    private void usernameTxtFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameTxtFldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usernameTxtFldActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        //Adding items to the register panel list
        String genre = musicDropdown.getSelectedItem().toString();
        registerListModel.addElement(genre);
    }//GEN-LAST:event_addBtnActionPerformed

    private void postBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postBtnActionPerformed
        DateFormat dateFormat = new SimpleDateFormat("HH:mm");
        Date date = new Date();
        String postTime = dateFormat.format(date);
        
        String post = postTime + " - " + currentUser + ": " + postTxtFld.getText();
        
        String updatePost = "postToFile~" + post;
        setupClient(updatePost);
        
    }//GEN-LAST:event_postBtnActionPerformed

    private void postTxtFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postTxtFldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_postTxtFldActionPerformed

    private void requestFriendshipBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestFriendshipBtnActionPerformed
   
        String packet = "requestFriend~" + connectedPeopleListContents.getSelectedValue() + "~" + currentUser;
        setupClient(packet);
    }//GEN-LAST:event_requestFriendshipBtnActionPerformed

    private void loginBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginBtnActionPerformed
        //take the user input (username and password) and compare it to the file to check if they exist
        String usernameStr = usernameTxtFld.getText();
        String passwordStr = passwordTxtFld.getText();
        String packetStr = "login~" + usernameStr + "~" + passwordStr;

        if (!usernameStr.equals("")) {
            if (!passwordStr.equals("")) {
                setupClient(packetStr);
            }
        }

        


    }//GEN-LAST:event_loginBtnActionPerformed

    private void musicDropdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_musicDropdownActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_musicDropdownActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        
        int index = rGenreList.getSelectedIndex();
        registerListModel.remove(index);

        
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void playBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playBtnActionPerformed
        
        ExecutorService service = Executors.newFixedThreadPool(4);
        service.submit(new Runnable() {
            public void run() {
                System.out.println("THIS IS THE SONG YOU CLICKED: " + sharedSongsListContents.getSelectedValue());
                setupClient("playSong~" + sharedSongsListContents.getSelectedValue());
            }
        });
        
    }//GEN-LAST:event_playBtnActionPerformed

    private void registerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerBtnActionPerformed

        //Take user input and put it into a string
        String usernameStr = rUsernameTxtFld.getText();
        String passwordStr = rPasswordTxtFld.getText();
        String confirmPasswordStr = rConfirmPasswordTxtFld.getText();
        String PoBstr = PoBTxtFld.getText();
        String DoBstr = DoBTxtFld.getText();
        
        if(usernameStr.equals("") || passwordStr.equals("") || PoBstr.equals("") || DoBstr.equals("")) {
            fillAllFieldsLbl.setVisible(true);
            return;
        }

        //Getting the contents of the music genre list
        ListModel model = rGenreList.getModel();
        Object obj;
        String listStr = "";
        for (int i = 0; i < model.getSize(); i++){
            obj =  model.getElementAt(i);
            listStr+= "~" + obj.toString();
        }
        System.out.println("listStr: " + listStr);
        //Check if the passwords match
        if (passwordStr.equals(confirmPasswordStr)) //checking that the passwords match
        {
            //make the packet with register at the front
            String packetStr = "register~" + usernameStr + "~" + passwordStr + "~" + PoBstr + "~" + DoBstr + listStr + musicString + imageString;

            setupClient(packetStr);
            fillAllFieldsLbl.setVisible(false);


        } else {
            rPasswordTxtFld.setText("");
            rConfirmPasswordTxtFld.setText("");

            passwordDontMatchLbl.setVisible(true); //Display error message

        }


    }//GEN-LAST:event_registerBtnActionPerformed

    private void setupClient(String packet) {
        try {
            client newClient = new client(packet);
            newClient.main();
        } catch (Exception ex) { }

        recieveMessage();
    }

    private void changeScreen(JPanel panel) {
        parentPanel.removeAll();
        parentPanel.add(panel);
        parentPanel.repaint();
        parentPanel.revalidate();
    }

    private void rPasswordTxtFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rPasswordTxtFldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rPasswordTxtFldActionPerformed

    private void hLogoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hLogoutBtnActionPerformed
        //Remove user from currently logged in list
        setupClient("logout~" + currentUser);
    }//GEN-LAST:event_hLogoutBtnActionPerformed

    private void PoBTxtFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PoBTxtFldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PoBTxtFldActionPerformed

    private void rConfirmPasswordTxtFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rConfirmPasswordTxtFldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rConfirmPasswordTxtFldActionPerformed

    private void friendsListContentsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_friendsListContentsValueChanged
        boolean x = evt.getValueIsAdjusting();
        if (x) {
            setupClient("friendsInfo~" + friendsListContents.getSelectedValue());

        }
    }//GEN-LAST:event_friendsListContentsValueChanged

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (homePanel.isVisible()) {
            setupClient("logout~" + currentUser);
        }
    }//GEN-LAST:event_formWindowClosing

    private void rImportMusicBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rImportMusicBtnActionPerformed
        //Opens up the file chooser
        JFileChooser chooser = new JFileChooser();

        FileNameExtensionFilter filter = new FileNameExtensionFilter(".wav, .mp3", "wav", "mp3");
        chooser.setFileFilter(filter);

        int returnVal = chooser.showOpenDialog(homePanel);

        if (returnVal==JFileChooser.APPROVE_OPTION) {
            File selectedFile = chooser.getSelectedFile();
                
            registerMusicListModel.addElement(selectedFile.getName());
                
            musicString += "~" + selectedFile;
                
            }
    }//GEN-LAST:event_rImportMusicBtnActionPerformed

    private void sharedSongsListContentsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_sharedSongsListContentsValueChanged
        boolean x = evt.getValueIsAdjusting();
        if (x) {
            System.out.println("Clicking song");
        }
    }//GEN-LAST:event_sharedSongsListContentsValueChanged

    private void connectedPeopleListContentsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_connectedPeopleListContentsValueChanged
        boolean x = evt.getValueIsAdjusting();
        if (x) {
            System.out.println("Clicking this friend: " + connectedPeopleListContents.getSelectedValue());
        }
    }//GEN-LAST:event_connectedPeopleListContentsValueChanged

    private void friendshipRequestListContentsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_friendshipRequestListContentsValueChanged
        boolean x = evt.getValueIsAdjusting();
        if (x) {
            System.out.println("Clicking this friendship request: " + friendshipRequestListContents.getSelectedValue());
        }
    }//GEN-LAST:event_friendshipRequestListContentsValueChanged

    private void rGenreListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_rGenreListValueChanged
        boolean x = evt.getValueIsAdjusting();
        if (x) {
            System.out.println("Clicking this genre: " + rGenreList.getSelectedValue());
        }
    }//GEN-LAST:event_rGenreListValueChanged

    private void acceptBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptBtnActionPerformed
        String packet = "acceptFriend~" + friendshipRequestListContents.getSelectedValue() + "~" + currentUser;
        
        int index = friendshipRequestListContents.getSelectedIndex();
        friendRequestsListModel.remove(index);
        
        setupClient(packet);
    }//GEN-LAST:event_acceptBtnActionPerformed

    private void refuseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refuseBtnActionPerformed
        String packet = "removeRequest~" + friendshipRequestListContents.getSelectedValue() + "~" + currentUser;
        
        int index = friendshipRequestListContents.getSelectedIndex();
        friendRequestsListModel.remove(index);
        
        setupClient(packet);
    }//GEN-LAST:event_refuseBtnActionPerformed

    private void stopBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopBtnActionPerformed
        setupClient("stopSong");
    }//GEN-LAST:event_stopBtnActionPerformed

    private void chatBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chatBtnActionPerformed
        String str = currentUser + "~" + connectedPeopleListContents.getSelectedValue();
        
        chatWindow chat;
        try {
            if (connectedPeopleListContents.getSelectedValue() != null) {
                chat = new chatWindow(str);
                chat.setVisible(true);
                chat.setDefaultCloseOperation(chatWindow.DISPOSE_ON_CLOSE);
            }
        } catch (InterruptedException ex) {
            Logger.getLogger(window.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_chatBtnActionPerformed

    private void uploadPicBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadPicBtnActionPerformed
        JFileChooser chooser = new JFileChooser();

        FileNameExtensionFilter filter = new FileNameExtensionFilter(".png", "png");
        chooser.setFileFilter(filter);

        int returnVal = chooser.showOpenDialog(homePanel);

        if (returnVal==JFileChooser.APPROVE_OPTION) {
            File selectedFile = chooser.getSelectedFile();
                
            ImageIcon icon = new ImageIcon(selectedFile.toString());
            
            registerPicLbl.setIcon(icon);
            
            imageString += "~" + selectedFile;
            
                
        }
    }//GEN-LAST:event_uploadPicBtnActionPerformed

    public void recieveMessage() {
        //Gets the message recieved from client
        String message = client.getMessage();

        String messageStr[] = message.split("~");

        //if statements to determine what the server did

        //LOGIN
        if (messageStr[0].equals("correctLogin")) {
            //Change screen from login to home
            changeScreen(homePanel);
            
            startRefresh();
           
            currentUser = usernameTxtFld.getText();
            currentUserLbl.setText("Current User: " + currentUser);
                       
            if (!messageStr[1].equals("")) {
                Path currentRelativePath = Paths.get("");
                String workingDirectory = currentRelativePath.toAbsolutePath().toString();

                File file = new File(messageStr[1]);
                String imageName = file.getName();

                ImageIcon icon = new ImageIcon(workingDirectory+"\\icons\\"+imageName);

                if (workingDirectory != "") {
                    imageLbl.setIcon(icon);
                    imageLbl.setText(" " + currentUser);
                }
            }
            
            //Remove error messages
            incorrectPasswordLbl.setVisible(false);
            usernameDoesntExistLbl.setVisible(false);

        } else if (message.equals("unknownUsername")) {
            //Show error message
            usernameDoesntExistLbl.setVisible(true);
            //Remove other error message
            incorrectPasswordLbl.setVisible(false);
        } else if (message.equals("incorrectPassword")) {
            //Show error message
            incorrectPasswordLbl.setVisible(true);
            //Remove other error message
            usernameDoesntExistLbl.setVisible(false);
        }

        //REGISTER
        else if (message.equals("userCreated")) {
            //Change screen back to the login screen
            changeScreen(loginPanel);

            //Remove error messages
            usernameExistsLbl.setVisible(false);
        } else if (message.equals("userAlreadyExists")) {
            usernameExistsLbl.setVisible(true);
        }

        //LOGOUT
        else if (message.equals("loggedOut")) {
            changeScreen(loginPanel);
            timer.cancel();
            timer.purge();
            connectedPeopleModel.removeAllElements();
            friendsListModel.removeAllElements();
        }

        //UPDATE HOME SCREEN
        else if (messageStr[0].equals("connectedPeople")) {
            updateConnectedPeople(message);
        }
        else if (messageStr[0].equals("friendsList")) {
            loadFriendsList(message);
        }
        else if (messageStr[0].equals("friendsInfo")) {
            updateFriendsInfo(message);
        }
        else if (messageStr[0].equals("updateFeed")) {
            updateFeed(message);
        }
         
        //OTHER FUNCTIONS
        else if (messageStr[0].equals("playingSong")) {
            System.out.println("Playing song");
        }
        else if (messageStr[0].equals("stoppingSong")) {
            System.out.println("Stopping song");
        }
        else if (messageStr[0].equals("postUpdated")) {
            setupClient("updateFeed"); //Call function to update news feed once button is clicked and psot is written to file
        }
        
        //FRIEND FUNCTIONS
        else if (messageStr[0].equals("friendRequestSent")) {
            setupClient("updateFriendRequests~" + currentUser);
        }
        else if (messageStr[0].equals("updateFriendRequests")) {
            updateFriendRequests(message);
        }
        else if (messageStr[0].equals("requestRemoved")) {
            setupClient("updateFriendRequests~" + currentUser);
        }
    }

    private void startRefresh() {
        //Timer for recurring resfreshes of the screen (every 3 seconds)
        timer = new Timer();
            timer.scheduleAtFixedRate(new TimerTask() {
                @Override
                public void run() {

                    friendsListModel.removeAllElements();
                    setupClient("friendsList~" + currentUser);
                                        
                    connectedPeopleModel.removeAllElements();
                    setupClient("connectedPeople");
                    
                    postListContents.setText(null);
                    setupClient("updateFeed");
                    
                    friendRequestsListModel.removeAllElements();
                    setupClient("updateFriendRequests~" + currentUser);

                }
            }, 0, 3000); //First is delay before first execution, second is delay between each subsequent executions (3 seconds)
            
    }

    private void updateConnectedPeople(String str) {
        
        String strArray[] = str.split("~");

        //So the current user isnt displayed
        String current = currentUser + "*";

        String friendStr = "";
        for (int i = 0; i < friendsListModel.getSize(); i++) {
            friendStr += "~" + friendsListModel.elementAt(i);
        }
        String element = "";

        for (int i = 1; i < strArray.length; i++){
            if(!strArray[i].equals(current))
            {
                String friendStrArray[] = friendStr.split("~");
                for (int j = 0; j < friendStrArray.length; j++) {
                    if (friendStrArray[j].equals(strArray[i]) || (friendStrArray[j] + "*").equals(strArray[i])) {
                        element = strArray[i] + " (friend)";
                    } else {
                        element = strArray[i];
                    }
                }
                
                connectedPeopleModel.addElement(element);
            }
        }
    }

    private void loadFriendsList(String str) {

        String strArray[] = str.split("~");

        for (int i = 1; i < strArray.length; i++) {
            if(!strArray[i].equals(currentUser))
            {
                friendsListModel.addElement(strArray[i]);
            }
        }
    }

    private void updateFriendsInfo(String str)  {

        infoContents.setText(null);
        String strArray[] = str.split("~");
        sharedSongsListModel.removeAllElements();

        infoContents.append("Place of Birth: " + strArray[3] + "\n");
        infoContents.append("Date of Birth: " + strArray[4] + "\n");
        infoContents.append("Favourite Genres: ");
        for (int i = 5; i < strArray.length; i++) {
            if ((strArray[i].contains(".wav")) || (strArray[i].contains(".mp3"))) {
                
                File file = new File(strArray[i]);
                String songName = file.getName();
                sharedSongsListModel.addElement(songName);
                
            } else if (strArray[i].contains(".png")) {
                File file = new File(strArray[i]);
                String imageName = file.getName();
                
                Path currentRelativePath = Paths.get("");
                String workingDirectory = currentRelativePath.toAbsolutePath().toString();
                ImageIcon icon = new ImageIcon(workingDirectory+"\\icons\\"+imageName);

                System.out.println("Path: " + icon);

                if (workingDirectory != "") {
                    friendImageLbl.setIcon(icon);
                    friendImageLbl.setText(" " + strArray[1]);
                }

            } else {
                infoContents.append(strArray[i] + "\n");
            }
        }     
    }

    private void updateFeed(String str) {
        String strArray[] = str.split("~");
        postListContents.setText(null);

        
        
        for (int i = 1; i < strArray.length; i++) {
            String lineArray[] = strArray[i].split("- ");
            String secondLineArray[] = lineArray[1].split(":");
            System.out.println("POST: " + secondLineArray[0]);
            System.out.println("NAME: " + currentUser);
            // || 
            if (secondLineArray[0].equals(currentUser)) {
                postListContents.append(strArray[i] + "\n");
            }
            for (int j = 0; j < friendsListModel.size(); j++) {
                if (friendsListModel.elementAt(j).equals(secondLineArray[0])) {
                    postListContents.append(strArray[i] + "\n");
                   
                }
            }

        }
    }
    
    private void updateFriendRequests(String str) {
        
        String[] strArray = str.split("~");
        
        for (int i = 1; i < strArray.length; i++) {
            friendRequestsListModel.addElement(strArray[i]);
        }
        
    }
   
    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new window().setVisible(true);
                } catch (InterruptedException ex) {
                    Logger.getLogger(window.class.getName()).log(Level.SEVERE, null, ex);
                }
 }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel DoBLbl;
    private javax.swing.JTextField DoBTxtFld;
    private javax.swing.JLabel PoBLbl;
    private javax.swing.JTextField PoBTxtFld;
    private javax.swing.JButton acceptBtn;
    private javax.swing.JButton addBtn;
    private javax.swing.JButton backToLoginBtn;
    private javax.swing.JButton chatBtn;
    private javax.swing.JScrollPane connectedPeopleList;
    private javax.swing.JList<String> connectedPeopleListContents;
    private javax.swing.JLabel connectedPeopleListLbl;
    private javax.swing.JLabel currentUserLbl;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JLabel fillAllFieldsLbl;
    private javax.swing.JLabel friendImageLbl;
    private javax.swing.JPanel friendSection;
    private javax.swing.JLabel friendsLbl;
    private javax.swing.JScrollPane friendsList;
    private javax.swing.JList<String> friendsListContents;
    private javax.swing.JLabel friendsPostLbl;
    private javax.swing.JLabel friendshipRequestLbl;
    private javax.swing.JScrollPane friendshipRequestList;
    private javax.swing.JList<String> friendshipRequestListContents;
    private javax.swing.JButton goToRegisterBtn;
    private javax.swing.JButton hLogoutBtn;
    private javax.swing.JPanel homePanel;
    private javax.swing.JLabel imageLbl;
    private javax.swing.JLabel incorrectPasswordLbl;
    private javax.swing.JTextArea infoContents;
    private javax.swing.JLabel infoLbl;
    private javax.swing.JScrollPane infoTxtArea;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton loginBtn;
    private javax.swing.JPanel loginPanel;
    private javax.swing.JComboBox<String> musicDropdown;
    private javax.swing.JLabel musicProfileLbl;
    private javax.swing.JLabel orLbl;
    private javax.swing.JPanel parentPanel;
    private javax.swing.JLabel passwordDontMatchLbl;
    private javax.swing.JLabel passwordLbl;
    private javax.swing.JTextField passwordTxtFld;
    private javax.swing.JButton playBtn;
    private javax.swing.JButton postBtn;
    private javax.swing.JLabel postLbl;
    private javax.swing.JScrollPane postList;
    private javax.swing.JTextArea postListContents;
    private javax.swing.JPanel postSection;
    private javax.swing.JTextField postTxtFld;
    private javax.swing.JLabel rAddMusicLbl;
    private javax.swing.JLabel rConfirmPasswordLbl;
    private javax.swing.JTextField rConfirmPasswordTxtFld;
    private javax.swing.JList<String> rGenreList;
    private javax.swing.JButton rImportMusicBtn;
    private javax.swing.JList<String> rMusicList;
    private javax.swing.JLabel rPasswordLbl;
    private javax.swing.JTextField rPasswordTxtFld;
    private javax.swing.JLabel rUsernameLbl;
    private javax.swing.JTextField rUsernameTxtFld;
    private javax.swing.JButton refuseBtn;
    private javax.swing.JButton registerBtn;
    private javax.swing.JPanel registerPanel;
    private javax.swing.JLabel registerPicLbl;
    private javax.swing.JButton requestFriendshipBtn;
    private javax.swing.JPanel requestSection;
    private javax.swing.JLabel sharedSongsLbl;
    private javax.swing.JScrollPane sharedSongsList;
    private javax.swing.JList<String> sharedSongsListContents;
    private javax.swing.JButton stopBtn;
    private javax.swing.JButton uploadPicBtn;
    private javax.swing.JLabel usernameDoesntExistLbl;
    private javax.swing.JLabel usernameExistsLbl;
    private javax.swing.JLabel usernameLbl;
    private javax.swing.JTextField usernameTxtFld;
    // End of variables declaration//GEN-END:variables
}
